#!/usr/bin/env bash
# vim: set filetype=sh :

# Change the hostname so that the domain is included within.
# This will allow our certificates to validate successfully.
# Clone the source code for our configuration management tool.
infrastructure_code_path=/infra_code
config_management_code_path="$infrastructure_code_path/kubernetes/config/${ kubernetes_configuration_management_tool }"

git clone "${ kubernetes_configuration_github_repository }" "$infrastructure_code_path"

if [ "${ kubernetes_configuration_management_tool }" == "ansible" ]
then
  cat >"/etc/ansible_vars.yml" <<ANSIBLE_EXTRA_VARS
# These variables are generated by user-data, as they are resolved
# at infrastructure provisioning time.
# To modify them, go to control_plane/aws/templates/user_data.
system_hostname: "$(hostname -s)"
ansible_vars_s3_bucket: "${ ansible_vars_s3_bucket }"
ansible_vars_s3_key: "${ ansible_vars_s3_key }"
environment_name: "${ environment_name }"
expected_etcd_servers: "${ expected_etcd_servers }"
expected_controllers: "${ expected_controllers }"
expected_workers: "${ expected_workers }"
aws_route_table_id: "${ route_table_id }"
kubernetes_pod_cidr_block: "${ kubernetes_pod_cidr }"
ANSIBLE_EXTRA_VARS
fi

# Create our configuration management service.
cat >/etc/systemd/system/configuration_management.service <<SYSTEMD_SERVICE
[Unit]
Description=Kubernetes Configuration Management
Documentation=https://github.com/carlosonunez/infrastructure/kubernetes

[Service]
Environment="CERT_TOKEN=${ certificate_token }"
Environment="INSTANCE_ROLE=${ role }"
Environment="HOME=/root"
WorkingDirectory=$infrastructure_code_path
ExecStartPre=/usr/bin/git checkout ${ kubernetes_configuration_github_branch }
ExecStart=$config_management_code_path/config.sh

[Install]
WantedBy=multi-user.target
SYSTEMD_SERVICE

# Wait for Kubernetes certs to get generated locally.
# TODO: Check for certs in a loop to avoid race conditions.
echo "Waiting 90 seconds for Kubernetes certs to get generated client-side."
sleep 90

# Configure our AWS credentials for this instance.
mkdir -p /root/.aws
cat >/root/.aws/credentials <<AWS_CREDENTIALS
[default]
region = ${ aws_region }
aws_access_key_id = ${ aws_access_key_id }
aws_secret_access_key = ${ aws_secret_access_key }
AWS_CREDENTIALS

# Configure the instance.
systemctl daemon-reload &&
  systemctl enable configuration_management &&
  systemctl start configuration_management
