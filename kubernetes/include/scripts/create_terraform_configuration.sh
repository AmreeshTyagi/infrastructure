#!/usr/bin/env bash
if [ -z "$ENV_FILE" ] || [ ! -f "$ENV_FILE" ]
then
  >&2 echo "WARNING: No .env file was provided. Using local environment instead."
else
  export $(grep -v '^#' "$ENV_FILE" | xargs)
fi

AWS_REGION="${AWS_REGION?Please provide an AWS region to operate in.}"
AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID?Please provide an access key.}"
AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY?Please provide a secret key.}"
TERRAFORM_STATE_S3_BUCKET="${TERRAFORM_STATE_S3_BUCKET?Please provide the S3 bucket into which state  will be stored.}"
TERRAFORM_STATE_S3_KEY="${TERRAFORM_STATE_S3_KEY?Please provide the S3 key within the bucket into which state  will be stored.}"
SSH_KEY_S3_BUCKET_NAME="${SSH_KEY_S3_BUCKET_NAME?Please provide the bucket containing our SSH keys within S3.}"
SSH_KEY_S3_KEY_PATH="${SSH_KEY_S3_KEY_PATH?Please provide the path to our SSH keys within S3.}"
KUBERNETES_INFRASTRUCTURE_SOURCE_PATH="$(git rev-parse --show-toplevel)/kubernetes/control_plane/aws"
TERRAFORM_BACKEND_PATH="${KUBERNETES_INFRASTRUCTURE_SOURCE_PATH}/backend.tf"
TERRAFORM_PROVIDER_PATH="${KUBERNETES_INFRASTRUCTURE_SOURCE_PATH}/provider.tf"
AUTOGENERATED_TERRAFORM_TFVARS_PATH="${KUBERNETES_INFRASTRUCTURE_SOURCE_PATH}/terraform.tfvars"
TEMPLATED_TERRAFORM_TFVARS_PATH="${AUTOGENERATED_TERRAFORM_TFVARS_PATH}.template"
SSH_TEMP_KEY_PREFIX="${SSH_TEMP_KEY_FORMAT:-/tmp/kubernetes_cluster_ssh_key}"

create_s3_backend() {
  cat >"$TERRAFORM_BACKEND_PATH" <<BACKEND_CONFIG
terraform {
  backend "s3" {
    bucket = "${TERRAFORM_STATE_S3_BUCKET}"
    key = "${TERRAFORM_STATE_S3_KEY}"
    region = "${AWS_REGION}"
  }
}
BACKEND_CONFIG
}

configure_aws_provider() {
  cat >"${TERRAFORM_PROVIDER_PATH}" <<PROVIDER_CONFIG
provider "aws" {
  region = "${AWS_REGION}"
  access_key = "${AWS_ACCESS_KEY_ID}"
  secret_key = "${AWS_SECRET_ACCESS_KEY}"
}
PROVIDER_CONFIG
}

configure_terraform_variables() {
  if [ ! -f "$TEMPLATED_TERRAFORM_TFVARS_PATH" ]
  then
    >&2 echo "ERROR: Please provide terraform.tfvars template file at $TEMPLATED_TERRAFORM_TFVARS_PATH"
    return 1
  fi
  cat "$TEMPLATED_TERRAFORM_TFVARS_PATH" | \
    while read -r key_value_pair
    do
      if ! _is_key_value_pair "$key_value_pair" 
      then
        _copy_line_verbatim "$key_value_pair" "$AUTOGENERATED_TERRAFORM_TFVARS_PATH"
        continue
      fi
      terraform_variable=$(echo "$key_value_pair" | cut -f1 -d =)
      env_var_to_use=$(echo "$key_value_pair" | cut -f2 -d = | tr -d '"' | tr -d '$')
      env_var_value="${!env_var_to_use}"
      if [ -z "$env_var_value" ]
      then
        >&2 echo "WARN: '$env_var_to_use' is not defined. \
Its associated Terraform variable will be commented out."
        _comment_out_missing_terraform_variable "$terraform_variable" "$AUTOGENERATED_TERRAFORM_TFVARS_PATH"
      else
        _fill_in_templated_value "$terraform_variable" \
          "$AUTOGENERATED_TERRAFORM_TFVARS_PATH" \
          "$env_var_value"
      fi
    done
}

_comment_out_missing_terraform_variable() {
  terraform_variable="${1?Please provide the Terraform variable.}"
  tfvars_path="${2?Please provide the path to the Terraform variables to manipulate.}"
  echo "#${terraform_variable}=\"nothing provided\"" >> "$tfvars_path"
}

_fill_in_templated_value() {
  terraform_variable="${1?Please provide the Terraform variable.}"
  tfvars_path="${2?Please provide the path to the Terraform variables to manipulate.}"
  actual_value="${3?Please provide the actual value being substituted.}"
  echo "${terraform_variable}=\"$env_var_value\"" >> "$tfvars_path"
}

_is_key_value_pair() {
  key_value_pair_under_test="$1"
  echo "$key_value_pair_under_test" | grep -Eq "^[a-zA-Z_]{1,}=\".*\"$"
}

_copy_line_verbatim() {
  key_value_pair="${1?Please provide a kvp.}"
  tfvars_path="${2?Please provide a path to the tfvars file being generated.}"
  echo "$key_value_pair" >> "$tfvars_path"
}

add_our_external_ip_address() {
  tfvars_path="${1?Please provide the path to the variables file.}"
  if ! ip_address=$(curl -sL 'https://api.ipify.org?format=text')
  then
    return 1
  fi
  echo "provisioning_machine_ip_address=\"$ip_address\"" >> "$tfvars_path"
}

remove_existing_terraform_variables_if_any() {
  tfvars_path="${1?Please provide the path to the variables file.}"
  rm -f "$tfvars_path" &>/dev/null
}

_create_s3_ssh_key_bucket_if_not_present() {
  return_code=0
  if ! aws s3 ls "s3://$SSH_KEY_S3_BUCKET_NAME" &>/dev/null
  then
    aws s3 mb "s3://$SSH_KEY_S3_BUCKET_NAME"
    return_code=$?
  fi
  return "$return_code"
}

_create_and_download_ssh_key_from_s3() {
  set -e
  path_to_download_to="${1?Please provide the path to download the SSH key into.}"
  if [ -f "$path_to_download_to" ]
  then
    rm -f "$path_to_download_to" &>/dev/null
  fi
  if ! aws s3 ls "s3://$SSH_KEY_S3_BUCKET_NAME/$SSH_KEY_S3_KEY_PATH"
  then
    >&2 echo "WARN: SSH key not found; creating."
    ssh-keygen -t rsa -f "$path_to_download_to" -b 2048 -N "";
    aws s3 cp "$path_to_download_to" "s3://$SSH_KEY_S3_BUCKET_NAME/$SSH_KEY_S3_KEY_PATH";
  else
    aws s3 cp "s3://$SSH_KEY_S3_BUCKET_NAME/$SSH_KEY_S3_KEY_PATH" "$path_to_download_to"
  fi
  set +e
}

delete_preexisting_ssh_keys() {
  rm -rf "${SSH_TEMP_KEY_PREFIX}*"
}

create_or_retrieve_kubernetes_nodes_key_pair() {
  tfvars_path="${1?Please provide the path to the variables file.}"
  temporary_ssh_keypair_path="$(mktemp ${SSH_TEMP_KEY_PREFIX}.XXXXXXXXXXX)"
  if ! _create_s3_ssh_key_bucket_if_not_present
  then
    >&2 echo "ERROR: Unable to create SSH key bucket."
    return 1
  fi
  if ! _create_and_download_ssh_key_from_s3 "$temporary_ssh_keypair_path"
  then
    >&2 echo "ERROR: Unable to download SSH key from S3."
  fi
  public_key_to_use=$(ssh-keygen -y -f  "$temporary_ssh_keypair_path")
  echo "kubernetes_cluster_public_key=\"${public_key_to_use}\"" >> "$tfvars_path"
  echo "INFO: SSH key for instances is located at: $temporary_ssh_keypair_path"
}

remove_existing_terraform_variables_if_any "$AUTOGENERATED_TERRAFORM_TFVARS_PATH"
if ! add_our_external_ip_address "$AUTOGENERATED_TERRAFORM_TFVARS_PATH"
then
  >&2 echo "ERROR: Unable to fetch our external IP address. Check your \
internet connection."
  exit 1
fi

delete_preexisting_ssh_keys
create_or_retrieve_kubernetes_nodes_key_pair "$AUTOGENERATED_TERRAFORM_TFVARS_PATH" && \
  create_s3_backend && \
  configure_aws_provider && \
  configure_terraform_variables
